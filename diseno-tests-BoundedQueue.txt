========================================================================================================================
EJERCICIO 2 - JUNIT
========================================================================================================================
Tal y como hemos visto en clase vamos a diseñar los tests para la clase BoundedQueue siguiendo los pasos para la modelación
de las entradas.

      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      PASO 1. (Identificar unidades funcionales, párametros, valores devueltos, excepcciones)
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Primero vamos a identificar los métodos de clase y cual es la función de cada uno:

BoundedQueue(int capacity): Constructor de la clase que se encarga de inicializar la cola.
    -Excepción: IllegalArgumentException(la capacidad introducida al constructor es menos que uno)

enQueue(Object o): Introduce el elemento O en la cola.
    -Excepción: NullPointerException (El objeto O es nulo)
    -Excepción: IllegalStateException (Se lanza cuando la cola esta llena)

Object deQueue(): Devuelve el primer elemento que se introducio en la lista
    -Excepcion: IllegalStateException (Se lanza cuando la lista esta vacía)

boolean isEmpty(): Devuelve true si no hay mas elementos en la lista

boolean isFull(): Devuelve true si la cola esta llena

String toString(): Devuelve el string de la cola

No tratamos los párametros del programa ya que son privados y por tanto no formara parte al tenerlos en cuenta

    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    PASO 2. Definir caracterizaciones
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

BoundedQueue-> Tiene como párametro la capacidad de la cola, devuelve la Cola.
  C1_Se crea la cola con la capacidad(int capacity)

enQueue: Parametro el objeto que vamos a introducir en la cola.
  C2_Elemento se introduce en la cola
  Excepcion: NullPointerException-> Cubierto por C3
  Excepcion: IllegalStateException-> Cubierto por C3

deQueue-> Parametro es el estado de la cola. Devuelve el Objeto
  C3_Devuelve el primer objeto
  -Excepcion: IllegalStateException-> Cubierto por C3

isEmpty(): Devuelve true,false. Parametro el estado de la cola.
  Cubierto por C3

isFull(): Devuelve true, false. Parametro el estado de la cola
  Cubierto por C2

toString(): Devuelve el String de la Cola. Parametro el estado de la cola

¿Para que métodos es relevante las caracterizaciones?
C1(Se crea la cola con la capacidad introucida)-> BoundedQueue
C2(Elemento se introduce en la cola)-> enQueue,isFull
C3(Devuelve el primer objeto)-> deQueue, isEmpty

      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      PASO 3. Modelar el dominio de entrada
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Para este paso, vamos a introducir los bloques que tendría cada caracterización con un ejemplo para cada bloque.

Caracterizaciones |     b1         |      b2
----------------------------------------------------------------------------------------------
  C1              |   true         |      False
----------------------------------------------------------------------------------------------
  C2              |   True         |      False
----------------------------------------------------------------------------------------------
  C3              |   True         |      False

      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      PASO 4. Cobertura de tests para elegir combinaciones
      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
